    pipeline {
        agent any
        parameters {
            choice(name: 'BRANCH', choices: ['main', 'uat'], description: 'Please select branch')
            choice(name: 'PROJECT', choices: [
                'errorhandling', 
                'eda', 
                'load-balancing', 
                'openapi-gateway', 
                'protocol', 
                'schedule', 
                'orchestration',
                'mediation'
            ], description: 'Please select project')
            // Add a parameter for the cron schedule
            string(name: 'CRON_SCHEDULE', defaultValue: '', description: 'Cron expression for scheduling the build (e.g., "0 2 * * *" for daily at 2 AM). Leave empty to build immediately.')
        }
        triggers {
            // Only set the cron trigger if CRON_SCHEDULE is not empty
            cron( params.CRON_SCHEDULE ? params.CRON_SCHEDULE : '' )
        }
        tools {
            jdk 'open-jdk-17'
            maven 'Maven 3.9.5' // Make sure Maven is set up in Jenkins
        }
        stages {
            stage('Clean Workspace') {
                steps {
                    cleanWs() // Clean the workspace before starting the build
                }
            }
            stage('Checkout Code') {
                steps {
                    script {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: "*/${params.BRANCH}"]],
                            extensions: [
                                [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: "${params.PROJECT}"]]]
                            ],
                            userRemoteConfigs: [[
                                url: "${env.GIT_REPO}",
                                credentialsId: 'jenkins_ci'
                            ]]
                        ])
                    }
                }
            }
            stage('Build Project') {
                steps {
                    script {
                        def projectDir = "${params.PROJECT}"
                        def pomFile = "${projectDir}/pom.xml"
                        
                        if (!fileExists(pomFile)) {
                            error "POM file not found at '${pomFile}'. Please check the repository structure."
                        }
                        
                        // Capture Maven output
                        def mavenOutput = sh(script: """
                            cd ${projectDir}
                            echo "Building project: ${projectDir}"
                            mvn -f pom.xml clean package spring-boot:build-image -DskipTests=true
                        """, returnStdout: true).trim()

                        // Extract Docker image name from Maven output
                        def imageName = (mavenOutput =~ /Successfully built image '([^']+)'/)[0][1]
                        echo "Built Docker image: ${imageName}"

                        // Store the image name in an environment variable for later use
                        env.DOCKER_IMAGE = imageName
                    }
                }
            }
        }
        post {
            success {
                script {
                        echo "✅ Build completed successfully for project: ${params.PROJECT}"
                        def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId
                        def buildNumber = currentBuild.number
                        sh """
                            curl -s -X POST https://api.telegram.org/bot$Telegram_Token/sendMessage \
                                -d chat_id=${Telegram_ChatID} \
                                -d parse_mode="HTML" \
                                -d disable_web_page_preview=true \
                                -d text="<b>Stage</b>: Build project ${params.PROJECT} \
                                %0A<b>Bulid Number</b>: ${buildNumber} \
                                %0A<b>Status</b>: ✅ ${currentBuild.currentResult} \
                                %0A<b>Version</b>: ${env.APP_ENV}-${env.APP_VERSION} \
                                %0A<b>Environment</b>: ${env.APP_ENV} \
                                %0A<b>Image</b>: ${env.DOCKER_IMAGE ?: 'Unknown Image'} \
                                %0A<b>User Build</b>: ${buildUser ?: 'Unknown'}" 
                        """
                    }
            }
            failure {
                echo "❌ Build failed for project: ${params.PROJECT}. Check the logs for details."
                def buildNumber = currentBuild.number
                sh """
                    curl -s -X POST https://api.telegram.org/bot$Telegram_Token/sendMessage \
                        -d chat_id=${Telegram_ChatID} \
                        -d parse_mode="HTML" \
                        -d disable_web_page_preview=true \
                        -d text="<b>Stage</b>: Build project ${params.PROJECT} \
                        %0A<b>Bulid Number</b>: ${buildNumber} \
                        %0A<b>Status</b>: ❌ ${currentBuild.currentResult} \
                        %0A<b>Version</b>: ${env.APP_ENV}-${env.APP_VERSION} \
                        %0A<b>Environment</b>: ${env.APP_ENV} \
                        %0A<b>Image</b>: ${env.DOCKER_IMAGE ?: 'Unknown Image'} \
                        %0A<b>User Build</b>: ${buildUser ?: 'Unknown'}" 
                """
            }
        }
    }
